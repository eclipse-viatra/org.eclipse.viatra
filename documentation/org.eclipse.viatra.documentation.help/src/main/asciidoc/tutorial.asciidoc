= Getting Started with VIATRA
ifdef::env-github,env-browser[:outfilesuffix: .adoc]
:rootdir: .
ifndef::highlightjsdir[:highlightjsdir: {rootdir}/highlight.js]
ifndef::highlightjs-theme[:highlightjs-theme: foundation]

:imagesdir: {rootdir}/images
:toclevels: 2
:toc:
:toc-placement: macro
:numbered:
:icons: font
:sectnums:
:sectnumlevels: 4
:experimental:
:sectlinks:


include::tutorial/intro.adoc[leveloffset=+1]

toc::[]

<<<
include::tutorial/environment.adoc[leveloffset=+1]

<<<
include::cps/Domains.adoc[leveloffset=+1]

== Query Development
<<<
include::tutorial/queries.adoc[leveloffset=+2]

<<<
include::tutorial/query-api.adoc[leveloffset=+2]

<<<
== Model Transformation Development

For model transformation development a Java API is available, allowing seamless integration of the transformations into any Java applications. However, to enhance readability, we recommend using a higher-level JVM language, as it allows defining the transformation as an internal DSL of this host language.

In this tutorial we rely on the link:https://eclipse.org/xtend/[Xtend language] to host the VIATRA transformation DSL, and we rely on its extension method and type inference support to reduce unnecessary elements. However, other JVM-based languages can also be used with similar efficiency (for an example in link:https://kotlinlang.org/[Kotlin] see https://gist.github.com/doczir/bfe95c470599c5b8e60b400b80f92ea2).

include::tutorial/batch-transformations.adoc[leveloffset=+2]

<<<
include::tutorial/incremental-transformations.adoc[leveloffset=+2]

<<<
include::tutorial/transformation-debugger.adoc[leveloffset=+2]