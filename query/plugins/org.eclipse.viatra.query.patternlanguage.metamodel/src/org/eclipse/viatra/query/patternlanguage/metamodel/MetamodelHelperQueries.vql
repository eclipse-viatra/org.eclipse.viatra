/*******************************************************************************
 * Copyright (c) 2010-2018, Mocsai Krisztain, IncQuery Labs Ltd.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-v20.html.
 * 
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
 
 package org.eclipse.viatra.query.patternlanguage.metamodel

import
"http://www.eclipse.org/viatra/query/patternlanguage/emf/GraphPatternLanguage"
import "http://www.eclipse.org/emf/2002/Ecore"

pattern variableEClassifier(variable : Variable, eClass : EClassifier) {
    PathExpressionConstraint.src.expression(pathExp, variable);
    PathExpressionConstraint.edgeType.refname(pathExp, feature);
    EClass.eStructuralFeatures(eClass, feature);
} or {
    PathExpressionConstraint.dst.expression(pathExp, variable);
    PathExpressionConstraint.edgeType.refname(pathExp, feature);
    EReference.eType(feature, eClass);
} or {
    find variableType(variable, type);
    EClassifierReference.classifier(type, eClass);
}

pattern variableJavaClassRef(variable : Variable, javaRef : EString) {
    find variableType(variable, type);
    JavaClassReference.className(type, javaRef);
}

pattern variableType(variable : Variable, type : UnaryType) {
    Parameter.types(variable, type);
} or {
    ParameterRef.referredParam.types(variable, type);
} or {
    LocalVariable.types(variable, type);
} or {
    ParameterRef.types(variable, type);
}

pattern
parameterRefDeclaredTypeInferredType(paramref : ParameterRef, declaredEClass : EClass, eClass : EClass) {
    find variableEClassifier(paramref, eClass);
    ParameterRef.referredParam(paramref, parameter);
    Parameter.types(parameter, declaredType);
    EClassifierReference.classifier(declaredType, declaredEClass);
}

pattern
parameterRefDeclaredTypeInferredSimpleType(paramref : ParameterRef, declaredEClass : EClass, eClass : EClass) {
    find variableType(paramref, type);
    EClassifierReference.classifier(type, eClass);

    ParameterRef.referredParam(paramref, parameter);
    Parameter.types(parameter, declaredType);
    EClassifierReference.classifier(declaredType, declaredEClass);
}

pattern commonDescendant(eClass1 : EClassifier, eClass2 : EClassifier) {
    find superclassOrSelf(subClass, eClass1);
    find superclassOrSelf(subClass, eClass2);
} or {
    eClass1 == eClass2;
}

pattern superclassOrSelf(subClass : EClass, superClass : EClass) {
    EClass.eSuperTypes*(subClass, superClass);
}

pattern superclass(subClass : EClass, superClass : EClass) {
    EClass.eSuperTypes*(subClass, superClass);
}