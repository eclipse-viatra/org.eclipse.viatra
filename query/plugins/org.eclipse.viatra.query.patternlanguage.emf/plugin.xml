<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.0"?>

<plugin>
   <extension-point id="annotation" name="Pattern Annotation" schema="schema/annotation.exsd"/>
   <extension-point id="purewhitelist" name="VIATRA Query @Pure Whitelist extension" schema="schema/purewhitelist.exsd"/>

   <extension point="org.eclipse.emf.ecore.generated_package">
      <!-- @generated PatternLanguage -->
      <package
            uri="http://www.eclipse.org/viatra/query/patternlanguage/emf/PatternLanguage"
            class="org.eclipse.viatra.query.patternlanguage.emf.vql.PatternLanguagePackage"
            genModel="model/PatternLanguage.genmodel"/>
   </extension>
<extension
        point="org.eclipse.viatra.query.runtime.base.wellbehaving.derived.features">
     <wellbehaving-derived-feature
           classifier-name="PatternBody"
           feature-name="variables"
           package-nsUri="http://www.eclipse.org/viatra/query/patternlanguage/PatternLanguage">
     </wellbehaving-derived-feature>
     <wellbehaving-derived-feature
           classifier-name="Variable"
           feature-name="references"
           package-nsUri="http://www.eclipse.org/viatra/query/patternlanguage/PatternLanguage">
     </wellbehaving-derived-feature>
     <wellbehaving-derived-feature
           classifier-name="VariableReference"
           feature-name="variable"
           package-nsUri="http://www.eclipse.org/viatra/query/patternlanguage/PatternLanguage">
     </wellbehaving-derived-feature>
  </extension>
  <extension
        point="org.eclipse.viatra.query.patternlanguage.emf.purewhitelist">
     <pure-element
           fully-qualified-name="java.lang.Math.sin(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.cos(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.tan(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.asin(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.acos(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.atan(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.tan(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.toRadians(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.exp(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.log(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.log10(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.sqrt(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.cbrt(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.IEEEremainder(double, double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.ceil(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.floor(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.rint(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.atan2(double, double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.pow(double, double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.round(float)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.round(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.abs(int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.abs(long)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.abs(float)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.abs(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.max(int, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.max(long, long)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.max(float, float)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.max(double, double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.min(int, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.min(long, long)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.min(float, float)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.min(double, double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.ulp(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.ulp(float)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.signum(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.signum(float)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.sinh(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.cosh(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.tanh(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.hypot(double, double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.expm1(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.log1p(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.copySign(double, double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.copySign(float, float)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.getExponent(float)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.getExponent(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.nextAfter(double, double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.nextAfter(float, double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.nextUp(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.nextUp(float)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.scalb(double, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Math.scalb(float, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.length()"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.isEmpty()"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.charAt(int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.codePointAt(int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.codePointBefore(int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.codePointCount(int, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.offsetByCodePoints(int, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.getBytes(java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.getBytes(java.nio.Charset)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.getBytes()"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.equals(java.lang.Object)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.contentEquals(java.lang.StringBuffer)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.contentEquals(java.lang.CharSequence)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.equalsIgnoreCase(java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.compareTo(java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.compareToIgnoreCase(java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.regionMatches(int, java.lang.String, int, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.regionMatches(boolean, int, java.lang.String, int, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.startsWith(java.lang.String, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.startsWith(java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.endsWith(java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.indexOf(int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.indexOf(int, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.lastIndexOf(int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.lastIndexOf(int, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.indexOf(java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.indexOf(java.lang.String, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.lastIndexOf(java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.lastIndexOf(java.lang.String, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.substring(int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.substring(int, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.subSequence(int, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.concat(java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.replace(char, char)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.matches(java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.contains(java.lang.CharSequence)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.replaceFirst(java.lang.String, java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.replaceAll(java.lang.String, java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.split(java.lang.String, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.split(java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.toLowerCase(java.util.Locale)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.toLowerCase()"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.toUpperCase(java.util.Locale)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.toUpperCase()"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.trim()"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.toCharArray()"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.format(java.lang.String, java.lang.Object[])"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[])"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.valueOf(java.lang.Object)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.valueOf(char[])"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.valueOf(char[], int, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.copyValueOf(char[], int, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.copyValueOf(char[])"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.valueOf(boolean)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.valueOf(char)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.valueOf(int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.valueOf(long)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.valueOf(float)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.String.valueOf(double)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Integer.parseInt(java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Integer.parseInt(java.lang.String, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Integer.valueOf(int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Integer.valueOf(java.lang.String)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.lang.Integer.valueOf(java.lang.String, int)"
           type="method">
     </pure-element>
     <pure-element
           fully-qualified-name="java.math.BigDecimal"
           type="class">
     </pure-element>
  </extension>
  <extension
        point="org.eclipse.viatra.query.patternlanguage.emf.annotation">
     <annotation
           description="This annotation is used to record domain-specific knowledge about a functional dependency among matches of this pattern. For a given value combination of the &apos;forEach&apos; parameters, at most one value of each &apos;unique&apos; parameter may occur in the match set."
           name="FunctionalDependency">
        <annotationparameter
              description="The name of a query parameter on the left-hand side of the dependency."
              mandatory="false"
              multiple="true"
              name="forEach"
              type="variablereference">
        </annotationparameter>
        <annotationparameter
              description="The name of a query parameter on the right-hand side of the dependency."
              mandatory="false"
              multiple="true"
              name="unique"
              type="variablereference">
        </annotationparameter>
     </annotation>
  </extension>
</plugin>
