/*******************************************************************************
 * Copyright (c) 2010-2012, Zoltan Ujhelyi, Istvan Rath and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zoltan Ujhelyi - initial API and implementation
 *******************************************************************************/
module org.eclipse.viatra.query.patternlanguage.emf.GenerateEMFPatternLanguage

import org.eclipse.emf.mwe.utils.*
import org.eclipse.emf.mwe2.ecore.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var projectName = "org.eclipse.viatra.query.patternlanguage.emf"
var runtimeProject = "../${projectName}"
var metamodel = "platform:/resource/${projectName}/model/PatternLanguage.genmodel"

Workflow {
    bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "${runtimeProject}/.."
        
        registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
        registerGeneratedEPackage = "org.eclipse.xtext.common.types.TypesPackage"
        registerGeneratedEPackage = "org.eclipse.xtext.xtype.XtypePackage"
        registerGeneratedEPackage = "org.eclipse.emf.ecore.EcorePackage"

        registerGenModelFile = metamodel
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/emf-gen"
    }
    
    component = EcoreGenerator {
        genModel = metamodel
        srcPath = "${runtimeProject}/emf-gen"
    }

    component = XtextGenerator {
        configuration = {
            project = StandardProjectConfig {
                baseName = projectName
                rootPath = ".."
                
                runtimeTest = {
                    root = "../../tests/${projectName}.tests"
                    enabled = true
                    pluginXml = {
                        path = "plugin.xml_gen"
                    }
                    manifest = {
                        path = "MANIFEST.MF_gen" 
                    }
                }
                genericIde = {
                    enabled = true
                    metaInf = "${runtimeProject}.ide/META-INF"
                    pluginXml = {
                        path = "plugin.xml_gen"
                    }
                    manifest = {
                        path = "MANIFEST.MF_gen" 
                    }
                    
                }
                eclipsePlugin = {
                    enabled = true
                    pluginXml = {
                        path = "plugin.xml_gen"
                    }
                    manifest = {
                        path = "MANIFEST.MF_gen" 
                    }
                }
                eclipsePluginTest = {
                    enabled = true
                    root = "../../tests/${projectName}.ui.tests"
                    pluginXml = {
                        path = "plugin.xml_gen"
                    }
                    manifest = {
                        path = "MANIFEST.MF_gen"
                    }
                }

                mavenLayout = false
                createEclipseMetaData = false
            }
            
            code = {
                encoding = "UTF-8"
                // File header is copied from EMFPatternLanguage.xtext
                fileHeader = "/*******************************************************************************
 * Copyright (c) 2010-2018, Zoltan Ujhelyi, Istvan Rath and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * This file was generated from EMFPatternLanguage.xtext
 *******************************************************************************/"
                preferXtendStubs = false
                
            }
            
            
        }
        
        language = StandardLanguage {
            name = "org.eclipse.viatra.query.patternlanguage.emf.EMFPatternLanguage"   
            referencedResource = "http://www.eclipse.org/xtext/common/JavaVMTypes"
            referencedResource = "http://www.eclipse.org/xtext/xbase/Xbase"
            referencedResource = metamodel 
            fileExtensions = "vql"
            
            scopeProvider = {
                inheritImplementation = false
                generateStub = false
            }
            
            fragment = ui.codemining.CodeMiningFragment {
                generateStub= true
                generateXtendStub = false
            }
        }
    }

}
