/*******************************************************************************
 * Copyright (c) 2010-2018, Zoltan Ujhelyi, Istvan Rath and Daniel Varro
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-v20.html.
 * 
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
grammar org.eclipse.viatra.query.patternlanguage.emf.EMFPatternLanguage with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/viatra/query/patternlanguage/emf/PatternLanguage"

PatternModel:
    ('package' packageName=QualifiedName ';'?)?
    importPackages=VQLImportSection patterns+=Pattern*;

VQLImportSection:
    {VQLImportSection} (packageImport+=PackageImport | patternImport+=PatternImport |
    importDeclarations+=XImportDeclaration)*;

PackageImport:
    'import' 'epackage'? ePackage=[ecore::EPackage|STRING] ('as' alias=ID)? ';'?;

PatternImport:
    'import' 'pattern'? pattern=[Pattern|QualifiedName] ';'?;

@Override
XImportDeclaration returns xtype::XImportDeclaration:
    'import' 'java' ((static?='static' extension?='extension'? importedType=[types::JvmDeclaredType|QualifiedName] '.'
    '*') | importedType=[types::JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ';'?;

Pattern:
    annotations+=Annotation*
    modifiers=Modifiers
    'pattern'
    name=ID
    '('
    (parameters+=Parameter (',' parameters+=Parameter)*)?
    ')'
    '='?
    bodies+=PatternBody ('or' bodies+=PatternBody)*;

Annotation:
    '@'
    name=ID
    ('(' parameters+=AnnotationParameter (',' parameters+=AnnotationParameter)* ')')?;

AnnotationParameter:
    name=ID '=' value=AnnotationValueReference;

Modifiers:
    {Modifiers} (
    //injective?='injective' &
    private?='private'? &
    execution=ExecutionTypeModifier?);

enum ExecutionTypeModifier returns ExecutionType:
    search | incremental;

enum ParameterDirectionModifier returns ParameterDirection:
    in | out;

Parameter:
    direction=ParameterDirectionModifier?
    name=ID
    (':' type=Type | ':' type=JavaType)?;

VariableReference:
    aggregator?='#'? var=ID |
    aggregator?='#';
  
Type returns ClassType:
    (metamodel=[PackageImport] '::' )? classname=[ecore::EClassifier]
;

RefType returns ReferenceType:
    {ReferenceType} refname=[ecore::EStructuralFeature];

JavaType returns EntityType:
    {JavaType} 'java' classRef=[types::JvmDeclaredType|QualifiedName];

PatternBody:
    {PatternBody}
    (name=ID)?
    '{'
    ((constraints+=Constraint ';'))*
    '}';

Constraint:
    CheckConstraint | TypeCheckConstraint |
    CompareConstraint | PatternCompositionConstraint | PathExpressionConstraint
    | EClassifierConstraint
;

TypeCheckConstraint:
    type = JavaType '(' var=VariableReference ')'
;

PatternCompositionConstraint:
    negative?='neg'? call=PatternCall
    |
    negative?='neg' (
        call = EClassifierConstraint |
        call = PathExpressionConstraint
    )
;

PatternCall:
    'find' patternRef=[Pattern|QualifiedName] (transitive=ClosureType)? '(' (parameters+=ValueReference (','
    parameters+=ValueReference)*)? ')';

CompareConstraint:
    leftOperand=ValueReference feature=CompareFeature rightOperand=ValueReference;

enum CompareFeature:
    equality='==' | inequality='!=';

CheckConstraint:
    'check' '(' expression=XExpression ')';

PathExpressionConstraint:
    sourceType=Type ('.' (edgeTypes += RefType)?)* (transitive=ClosureType)? '(' src=VariableReference ',' dst=ValueReference ')'
;

ValueReference:
    LiteralValueReference | VariableReference | ComputationValue;

AnnotationValueReference returns ValueReference:
    ValueReference | ListValue;

LiteralValueReference returns ValueReference:
    NumberValue | StringValue | BoolValue | EnumValue | JavaConstantValue;

JavaConstantValue:
    'java' classRef=[types::JvmDeclaredType|QualifiedName] '::' fieldRef=[types::JvmField];

StringValue returns LiteralValueReference:
    {StringValue} value=STRING;

NumberValue returns LiteralValueReference:
    /* NOTE (bug 537374)
     * XNumberLiteral is always unsigned to avoid conflicts with unary '-' operators in Xbase expressions,
     * customizing it would change the behavior in check and eval expressions. On the other hand, providing
     * an alternative syntax might easily result in different behavior inside and outside check expressions,
     * thus it is easier to customize the VQL-specific NumberValue type with this information. 
     */
    {NumberValue} ('+'|negative?='-')? value=XNumberLiteral;

@Override XNumberLiteral returns xbase::XNumberLiteral:
    {xbase::XNumberLiteral} value=Number;

BoolValue returns BoolValue:
    value=XBooleanLiteral;

@Override
XBooleanLiteral returns xbase::XBooleanLiteral:
    {xbase::XBooleanLiteral} ('false' | 'FALSE' | isTrue?='true' | isTrue?="TRUE");

ListValue:
    '{' values+=ValueReference (',' values+=ValueReference)* '}';

ComputationValue:
    AggregatedValue | FunctionEvaluationValue;

FunctionEvaluationValue:
    'eval' (unwind?='unwind')? '(' expression=XExpression ')';

AggregatedValue:
// TODO aggregator should be QualifiedName
    aggregator=[types::JvmDeclaredType|ValidID] (call=PatternCall | call=EClassifierConstraint | call = PathExpressionConstraint);

EClassifierConstraint:
    type=Type '(' var=VariableReference ')';

EnumValue:
    (enumeration=[ecore::EEnum])? '::' literal=[ecore::EEnumLiteral];

enum ClosureType returns ClosureType:
    reflexive_transitive = '*' | transitive = '+'
;