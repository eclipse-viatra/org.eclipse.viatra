/**
 * Copyright (c) 2010-2018, Mocsai Krisztain, IncQuery Labs Ltd.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *   Mocsai Krisztian - initial API and implementation
 *******************************************************************************/
 
 package org.eclipse.viatra.query.patternlanguage.metamodel.queries

import
"http://www.eclipse.org/viatra/query/patternlanguage/emf/GraphPatternLanguage"
import "http://www.eclipse.org/emf/2002/Ecore"

@Constraint(targetEditorId = "*", severity = "error", message = "Parameters must have exactly one type declaration.", key = {
    parameter })
pattern undefinedOrMultipleDeclarationParameterType(parameter : Parameter) {
    neg Parameter.types(parameter, _);
} or {
    Parameter.types(parameter, type1);
    Parameter.types(parameter, type2);
    type1 != type2;
}

@Constraint(targetEditorId = "*", severity = "error", message = "Missing type declaration.", key = {
    pathExp })
pattern undefinedPathExpressionType(pathExp : PathExpressionConstraint) {
    neg PathExpressionConstraint.edgeType(pathExp, _);
}

@Constraint(targetEditorId = "*", severity = "error", key = {
    paramref, type1Name, type2Name
}, message = "Variable type $type1Name$ does not conform to type $type2Name$.", symmetric = {
    type1Name, type2Name })
pattern
nonConformingType(paramref : ParameterRef, type1Name : EString, type2Name : EString) {
    find variableEClassifier(paramref, eClassifier1);
    find variableEClassifier(paramref, eClassifier2);
    eClassifier1 != eClassifier2;

    neg find commonDescendant(eClassifier1, eClassifier2);

    EClassifier.name(eClassifier1, type1Name);
    EClassifier.name(eClassifier2, type2Name);
} or {
    find variableEClassifier(paramref, eClassifier);
    find variableJavaClassRef(paramref, type2Name);

    EClassifier.name(eClassifier, type1Name);
} or {
    find variableJavaClassRef(paramref, type1Name);
    find variableJavaClassRef(paramref, type2Name);
    type1Name != type2Name;
}

@Constraint(targetEditorId = "*", severity = "warning", key = {
    paramref, declaredEClass, eClass
}, message = "Declared type $declaredEClass.name$ is less specific then the type $eClass.name$ inferred from bodies.")
pattern
declaredTypeLessSpecific(paramref : ParameterRef, declaredEClass : EClass, eClass : EClass) {
    find
    parameterRefDeclaredTypeInferredType(paramref, declaredEClass, eClass);

    find superclass(eClass, declaredEClass);
}

@Constraint(targetEditorId = "*", severity = "warning", key = {
    paramref, declaredEClass, eClass
}, message = "Type $eClass.name$ inferred from bodies is less specific then the declared type $declaredEClass.name$.")
pattern
inferredTypeLessSpecific(paramref : ParameterRef, declaredEClass : EClass, eClass : EClass) {
    find
    parameterRefDeclaredTypeInferredSimpleType(paramref, declaredEClass, eClass);

    find superclass(declaredEClass, eClass);
}