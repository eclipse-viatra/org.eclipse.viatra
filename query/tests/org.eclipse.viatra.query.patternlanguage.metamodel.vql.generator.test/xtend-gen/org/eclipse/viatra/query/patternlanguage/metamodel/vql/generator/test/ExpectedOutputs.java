/**
 * Copyright (c) 2010-2018, Mocsai Krisztain, IncQuery Labs Ltd.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *   Mocsai Krisztian - initial API and implementation
 */
package org.eclipse.viatra.query.patternlanguage.metamodel.vql.generator.test;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Functions.Function0;

@SuppressWarnings("all")
public class ExpectedOutputs {
  public static String patternWithoutBody = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package vgql.test");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import \"http://org.eclipse.viatra/model/cps\"");
      _builder.newLine();
      _builder.newLine();
      _builder.append("pattern test(");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("hi: HostInstance");
      _builder.newLine();
      _builder.append(") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HostInstance(hi);");
      _builder.newLine();
      _builder.append("}");
      return _builder.toString();
    }
  }.apply();
  
  public static String patternWithPathExpression = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package vgql.test");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import \"http://org.eclipse.viatra/model/cps\"");
      _builder.newLine();
      _builder.newLine();
      _builder.append("pattern test2(");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("hi: HostInstance,");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("ai: java ^java.lang.Integer");
      _builder.newLine();
      _builder.append(") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HostInstance(hi);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("java ^java.lang.Integer(ai);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HostInstance.applications(hi, ai);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  public static String patternWithStringLiteral = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package vgql.test");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import \"http://org.eclipse.viatra/model/cps\"");
      _builder.newLine();
      _builder.newLine();
      _builder.append("pattern test3(");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("hi: HostInstance");
      _builder.newLine();
      _builder.append(") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HostInstance(hi);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("Identifiable.identifier(hi, \"abc\");");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  public static String testAllCases = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package vgql.test");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import \"http://org.eclipse.viatra/model/cps\"");
      _builder.newLine();
      _builder.newLine();
      _builder.append("pattern test(");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("hi: HostInstance");
      _builder.newLine();
      _builder.append(") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HostInstance(hi);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("pattern test2(");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("hi: HostInstance,");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("ai: <<<<<<<Unexpected type declaration.>>>>>>>");
      _builder.newLine();
      _builder.append(") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HostInstance(hi);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HostInstance.applications(hi, ai);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("pattern test3(");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("hi: HostInstance");
      _builder.newLine();
      _builder.append(") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HostInstance(hi);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("Identifiable.identifier(hi, \"abc\");");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("pattern test4(");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("hi: HostInstance");
      _builder.newLine();
      _builder.append(") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HostInstance(hi);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("Identifiable.identifier(hi, name);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("check(name != name.toLowerCase);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("pattern test5(");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("hi: HostInstance,");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("out name: <<<<<<<Unexpected type declaration.>>>>>>>");
      _builder.newLine();
      _builder.append(") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HostInstance(hi);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("Identifiable.identifier(hi, n);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("expression2 == name;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("expression2 == eval(n.toLowerCase);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("pattern test6(");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("hi: HostInstance");
      _builder.newLine();
      _builder.append(") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HostInstance(hi);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("find test4(hi);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("pattern test7(");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("hi: HostInstance");
      _builder.newLine();
      _builder.append(") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HostInstance(hi);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("neg find test4(hi);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("pattern test8(");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("hi: HostInstance,");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("ai: ApplicationInstance");
      _builder.newLine();
      _builder.append(") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HostInstance(hi);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("ApplicationInstance(ai);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<<<<<<<PathExpressionConstraint should have one edgeType at least.>>>>>>>;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("pattern test9(");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("hi: HostInstance,");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("c: <<<<<<<Unexpected type declaration.>>>>>>>");
      _builder.newLine();
      _builder.append(") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HostInstance(hi);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("expression2 == c;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("expression2 == find test8(hi, _);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("pattern pattern10(");
      _builder.newLine();
      _builder.append(") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("expression0 == count find test7(_);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("pattern BeforeOrAfter(");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("st: State,");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("to: State");
      _builder.newLine();
      _builder.append(") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("State(st);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("State(to);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("Transition(tr);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("State.outgoingTransitions(to, tr);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("Transition.targetState(tr, st);");
      _builder.newLine();
      _builder.append("} or {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("State(st);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("State(to);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("Transition(tr);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("State.outgoingTransitions(st, tr);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("State.outgoingTransitions(tr, to);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
}
