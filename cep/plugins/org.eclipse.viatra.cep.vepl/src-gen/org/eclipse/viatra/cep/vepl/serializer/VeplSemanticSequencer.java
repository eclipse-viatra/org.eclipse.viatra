/*
 * generated by Xtext
 */
package org.eclipse.viatra.cep.vepl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra.cep.vepl.services.VeplGrammarAccess;
import org.eclipse.viatra.cep.vepl.vepl.AndOperator;
import org.eclipse.viatra.cep.vepl.vepl.AtLeastOne;
import org.eclipse.viatra.cep.vepl.vepl.Atom;
import org.eclipse.viatra.cep.vepl.vepl.AtomicEventPattern;
import org.eclipse.viatra.cep.vepl.vepl.ChainedExpression;
import org.eclipse.viatra.cep.vepl.vepl.ComplexEventExpression;
import org.eclipse.viatra.cep.vepl.vepl.ComplexEventPattern;
import org.eclipse.viatra.cep.vepl.vepl.EventModel;
import org.eclipse.viatra.cep.vepl.vepl.FollowsOperator;
import org.eclipse.viatra.cep.vepl.vepl.GenericImport;
import org.eclipse.viatra.cep.vepl.vepl.Infinite;
import org.eclipse.viatra.cep.vepl.vepl.Multiplicity;
import org.eclipse.viatra.cep.vepl.vepl.NegOperator;
import org.eclipse.viatra.cep.vepl.vepl.OrOperator;
import org.eclipse.viatra.cep.vepl.vepl.ParameterizedPatternCall;
import org.eclipse.viatra.cep.vepl.vepl.ParametrizedQueryReference;
import org.eclipse.viatra.cep.vepl.vepl.PatternCallParameter;
import org.eclipse.viatra.cep.vepl.vepl.PatternCallParameterList;
import org.eclipse.viatra.cep.vepl.vepl.QueryImport;
import org.eclipse.viatra.cep.vepl.vepl.QueryResultChangeEventPattern;
import org.eclipse.viatra.cep.vepl.vepl.Rule;
import org.eclipse.viatra.cep.vepl.vepl.Timewindow;
import org.eclipse.viatra.cep.vepl.vepl.Trait;
import org.eclipse.viatra.cep.vepl.vepl.TraitList;
import org.eclipse.viatra.cep.vepl.vepl.TraitTypedParameterList;
import org.eclipse.viatra.cep.vepl.vepl.TypedParameter;
import org.eclipse.viatra.cep.vepl.vepl.TypedParameterList;
import org.eclipse.viatra.cep.vepl.vepl.TypedParameterWithDefaultValue;
import org.eclipse.viatra.cep.vepl.vepl.UntilOperator;
import org.eclipse.viatra.cep.vepl.vepl.VeplPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class VeplSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private VeplGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == VeplPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case VeplPackage.AND_OPERATOR:
				sequence_AndOperator(context, (AndOperator) semanticObject); 
				return; 
			case VeplPackage.AT_LEAST_ONE:
				sequence_AtLeastOne(context, (AtLeastOne) semanticObject); 
				return; 
			case VeplPackage.ATOM:
				if (rule == grammarAccess.getAtomRule()) {
					sequence_Atom(context, (Atom) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getComplexEventExpressionAccess().getComplexEventExpressionLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryRule()
						|| rule == grammarAccess.getNormalPrimaryRule()) {
					sequence_Atom_NormalPrimary(context, (Atom) semanticObject); 
					return; 
				}
				else break;
			case VeplPackage.ATOMIC_EVENT_PATTERN:
				sequence_AtomicEventPattern(context, (AtomicEventPattern) semanticObject); 
				return; 
			case VeplPackage.CHAINED_EXPRESSION:
				sequence_ChainedExpression(context, (ChainedExpression) semanticObject); 
				return; 
			case VeplPackage.COMPLEX_EVENT_EXPRESSION:
				if (rule == grammarAccess.getComplexEventExpressionRule()) {
					sequence_ComplexEventExpression(context, (ComplexEventExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getComplexEventExpressionAccess().getComplexEventExpressionLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryRule()) {
					sequence_ComplexEventExpression_NegatedPrimary_NormalPrimary_ComplexEventExpression_1_0(context, (ComplexEventExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNormalPrimaryRule()) {
					sequence_ComplexEventExpression_NormalPrimary(context, (ComplexEventExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNegatedPrimaryRule()) {
					sequence_NegatedPrimary(context, (ComplexEventExpression) semanticObject); 
					return; 
				}
				else break;
			case VeplPackage.COMPLEX_EVENT_PATTERN:
				sequence_ComplexEventPattern(context, (ComplexEventPattern) semanticObject); 
				return; 
			case VeplPackage.EVENT_MODEL:
				sequence_EventModel(context, (EventModel) semanticObject); 
				return; 
			case VeplPackage.FOLLOWS_OPERATOR:
				sequence_FollowsOperator(context, (FollowsOperator) semanticObject); 
				return; 
			case VeplPackage.GENERIC_IMPORT:
				sequence_GenericImport(context, (GenericImport) semanticObject); 
				return; 
			case VeplPackage.INFINITE:
				sequence_Infinite(context, (Infinite) semanticObject); 
				return; 
			case VeplPackage.MULTIPLICITY:
				sequence_Multiplicity(context, (Multiplicity) semanticObject); 
				return; 
			case VeplPackage.NEG_OPERATOR:
				sequence_NegOperator(context, (NegOperator) semanticObject); 
				return; 
			case VeplPackage.OR_OPERATOR:
				sequence_OrOperator(context, (OrOperator) semanticObject); 
				return; 
			case VeplPackage.PARAMETERIZED_PATTERN_CALL:
				sequence_ParameterizedPatternCall(context, (ParameterizedPatternCall) semanticObject); 
				return; 
			case VeplPackage.PARAMETRIZED_QUERY_REFERENCE:
				sequence_ParametrizedQueryReference(context, (ParametrizedQueryReference) semanticObject); 
				return; 
			case VeplPackage.PATTERN_CALL_PARAMETER:
				sequence_PatternCallParameter(context, (PatternCallParameter) semanticObject); 
				return; 
			case VeplPackage.PATTERN_CALL_PARAMETER_LIST:
				sequence_PatternCallParameterList(context, (PatternCallParameterList) semanticObject); 
				return; 
			case VeplPackage.QUERY_IMPORT:
				sequence_QueryImport(context, (QueryImport) semanticObject); 
				return; 
			case VeplPackage.QUERY_RESULT_CHANGE_EVENT_PATTERN:
				sequence_QueryResultChangeEventPattern(context, (QueryResultChangeEventPattern) semanticObject); 
				return; 
			case VeplPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case VeplPackage.TIMEWINDOW:
				sequence_Timewindow(context, (Timewindow) semanticObject); 
				return; 
			case VeplPackage.TRAIT:
				sequence_Trait(context, (Trait) semanticObject); 
				return; 
			case VeplPackage.TRAIT_LIST:
				sequence_TraitList(context, (TraitList) semanticObject); 
				return; 
			case VeplPackage.TRAIT_TYPED_PARAMETER_LIST:
				sequence_TraitTypedParameterList(context, (TraitTypedParameterList) semanticObject); 
				return; 
			case VeplPackage.TYPED_PARAMETER:
				sequence_TypedParameter(context, (TypedParameter) semanticObject); 
				return; 
			case VeplPackage.TYPED_PARAMETER_LIST:
				sequence_TypedParameterList(context, (TypedParameterList) semanticObject); 
				return; 
			case VeplPackage.TYPED_PARAMETER_WITH_DEFAULT_VALUE:
				sequence_TypedParameterWithDefaultValue(context, (TypedParameterWithDefaultValue) semanticObject); 
				return; 
			case VeplPackage.UNTIL_OPERATOR:
				sequence_UntilOperator(context, (UntilOperator) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ComplexEventOperator returns AndOperator
	 *     BinaryOperator returns AndOperator
	 *     AndOperator returns AndOperator
	 *
	 * Constraint:
	 *     {AndOperator}
	 */
	protected void sequence_AndOperator(ISerializationContext context, AndOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractMultiplicity returns AtLeastOne
	 *     AtLeastOne returns AtLeastOne
	 *
	 * Constraint:
	 *     {AtLeastOne}
	 */
	protected void sequence_AtLeastOne(ISerializationContext context, AtLeastOne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Atom returns Atom
	 *
	 * Constraint:
	 *     patternCall=ParameterizedPatternCall
	 */
	protected void sequence_Atom(ISerializationContext context, Atom semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VeplPackage.Literals.ATOM__PATTERN_CALL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VeplPackage.Literals.ATOM__PATTERN_CALL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomAccess().getPatternCallParameterizedPatternCallParserRuleCall_0(), semanticObject.getPatternCall());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ComplexEventExpression.ComplexEventExpression_1_0 returns Atom
	 *     Primary returns Atom
	 *     NormalPrimary returns Atom
	 *
	 * Constraint:
	 *     (patternCall=ParameterizedPatternCall multiplicity=AbstractMultiplicity? timewindow=Timewindow?)
	 */
	protected void sequence_Atom_NormalPrimary(ISerializationContext context, Atom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns AtomicEventPattern
	 *     EventPattern returns AtomicEventPattern
	 *     AbstractAtomicEventPattern returns AtomicEventPattern
	 *     AtomicEventPattern returns AtomicEventPattern
	 *
	 * Constraint:
	 *     (name=ID parameters=TypedParameterList? traits=TraitList? checkExpression=XBlockExpression?)
	 */
	protected void sequence_AtomicEventPattern(ISerializationContext context, AtomicEventPattern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChainedExpression returns ChainedExpression
	 *
	 * Constraint:
	 *     (operator=BinaryOperator expression=Primary)
	 */
	protected void sequence_ChainedExpression(ISerializationContext context, ChainedExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VeplPackage.Literals.CHAINED_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VeplPackage.Literals.CHAINED_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, VeplPackage.Literals.CHAINED_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VeplPackage.Literals.CHAINED_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChainedExpressionAccess().getOperatorBinaryOperatorParserRuleCall_0_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getChainedExpressionAccess().getExpressionPrimaryParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ComplexEventExpression returns ComplexEventExpression
	 *
	 * Constraint:
	 *     (left=ComplexEventExpression_ComplexEventExpression_1_0 right+=ChainedExpression*)
	 */
	protected void sequence_ComplexEventExpression(ISerializationContext context, ComplexEventExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComplexEventExpression.ComplexEventExpression_1_0 returns ComplexEventExpression
	 *     Primary returns ComplexEventExpression
	 *
	 * Constraint:
	 *     (
	 *         (left=ComplexEventExpression_ComplexEventExpression_1_0 right+=ChainedExpression* multiplicity=AbstractMultiplicity? timewindow=Timewindow?) | 
	 *         (negOperator=NegOperator left=NormalPrimary)
	 *     )
	 */
	protected void sequence_ComplexEventExpression_NegatedPrimary_NormalPrimary_ComplexEventExpression_1_0(ISerializationContext context, ComplexEventExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalPrimary returns ComplexEventExpression
	 *
	 * Constraint:
	 *     (left=ComplexEventExpression_ComplexEventExpression_1_0 right+=ChainedExpression* multiplicity=AbstractMultiplicity? timewindow=Timewindow?)
	 */
	protected void sequence_ComplexEventExpression_NormalPrimary(ISerializationContext context, ComplexEventExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns ComplexEventPattern
	 *     EventPattern returns ComplexEventPattern
	 *     ComplexEventPattern returns ComplexEventPattern
	 *
	 * Constraint:
	 *     (name=ID parameters=TypedParameterList? complexEventExpression=ComplexEventExpression context=Context?)
	 */
	protected void sequence_ComplexEventPattern(ISerializationContext context, ComplexEventPattern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventModel returns EventModel
	 *
	 * Constraint:
	 *     (name=QualifiedName imports+=Import* context=Context? modelElements+=ModelElement*)
	 */
	protected void sequence_EventModel(ISerializationContext context, EventModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComplexEventOperator returns FollowsOperator
	 *     BinaryOperator returns FollowsOperator
	 *     FollowsOperator returns FollowsOperator
	 *
	 * Constraint:
	 *     {FollowsOperator}
	 */
	protected void sequence_FollowsOperator(ISerializationContext context, FollowsOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns GenericImport
	 *     GenericImport returns GenericImport
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 */
	protected void sequence_GenericImport(ISerializationContext context, GenericImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VeplPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VeplPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGenericImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractMultiplicity returns Infinite
	 *     Infinite returns Infinite
	 *
	 * Constraint:
	 *     {Infinite}
	 */
	protected void sequence_Infinite(ISerializationContext context, Infinite semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractMultiplicity returns Multiplicity
	 *     Multiplicity returns Multiplicity
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Multiplicity(ISerializationContext context, Multiplicity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VeplPackage.Literals.MULTIPLICITY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VeplPackage.Literals.MULTIPLICITY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplicityAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ComplexEventOperator returns NegOperator
	 *     UnaryOperator returns NegOperator
	 *     NegOperator returns NegOperator
	 *
	 * Constraint:
	 *     {NegOperator}
	 */
	protected void sequence_NegOperator(ISerializationContext context, NegOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NegatedPrimary returns ComplexEventExpression
	 *
	 * Constraint:
	 *     (negOperator=NegOperator left=NormalPrimary)
	 */
	protected void sequence_NegatedPrimary(ISerializationContext context, ComplexEventExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VeplPackage.Literals.COMPLEX_EVENT_EXPRESSION__NEG_OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VeplPackage.Literals.COMPLEX_EVENT_EXPRESSION__NEG_OPERATOR));
			if (transientValues.isValueTransient(semanticObject, VeplPackage.Literals.COMPLEX_EVENT_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VeplPackage.Literals.COMPLEX_EVENT_EXPRESSION__LEFT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNegatedPrimaryAccess().getNegOperatorNegOperatorParserRuleCall_0_0(), semanticObject.getNegOperator());
		feeder.accept(grammarAccess.getNegatedPrimaryAccess().getLeftNormalPrimaryParserRuleCall_1_0(), semanticObject.getLeft());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ComplexEventOperator returns OrOperator
	 *     BinaryOperator returns OrOperator
	 *     OrOperator returns OrOperator
	 *
	 * Constraint:
	 *     {OrOperator}
	 */
	protected void sequence_OrOperator(ISerializationContext context, OrOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterizedPatternCall returns ParameterizedPatternCall
	 *
	 * Constraint:
	 *     (eventPattern=[EventPattern|ID] parameterList=PatternCallParameterList?)
	 */
	protected void sequence_ParameterizedPatternCall(ISerializationContext context, ParameterizedPatternCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParametrizedQueryReference returns ParametrizedQueryReference
	 *
	 * Constraint:
	 *     (query=[Pattern|ID] parameterList=PatternCallParameterList?)
	 */
	protected void sequence_ParametrizedQueryReference(ISerializationContext context, ParametrizedQueryReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PatternCallParameterList returns PatternCallParameterList
	 *
	 * Constraint:
	 *     (parameters+=PatternCallParameter parameters+=PatternCallParameter*)
	 */
	protected void sequence_PatternCallParameterList(ISerializationContext context, PatternCallParameterList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PatternCallParameter returns PatternCallParameter
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PatternCallParameter(ISerializationContext context, PatternCallParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VeplPackage.Literals.PATTERN_CALL_PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VeplPackage.Literals.PATTERN_CALL_PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPatternCallParameterAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Import returns QueryImport
	 *     QueryImport returns QueryImport
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 */
	protected void sequence_QueryImport(ISerializationContext context, QueryImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VeplPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VeplPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQueryImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns QueryResultChangeEventPattern
	 *     EventPattern returns QueryResultChangeEventPattern
	 *     AbstractAtomicEventPattern returns QueryResultChangeEventPattern
	 *     QueryResultChangeEventPattern returns QueryResultChangeEventPattern
	 *
	 * Constraint:
	 *     (name=ID parameters=TypedParameterList? queryReference=ParametrizedQueryReference resultChangeType=QueryResultChangeType?)
	 */
	protected void sequence_QueryResultChangeEventPattern(ISerializationContext context, QueryResultChangeEventPattern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns Rule
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (name=ID eventPatterns+=ParameterizedPatternCall eventPatterns+=ParameterizedPatternCall* action=XBlockExpression)
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Timewindow returns Timewindow
	 *
	 * Constraint:
	 *     length=INT
	 */
	protected void sequence_Timewindow(ISerializationContext context, Timewindow semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VeplPackage.Literals.TIMEWINDOW__LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VeplPackage.Literals.TIMEWINDOW__LENGTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimewindowAccess().getLengthINTTerminalRuleCall_1_0(), semanticObject.getLength());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TraitList returns TraitList
	 *
	 * Constraint:
	 *     (traits+=[Trait|ID] traits+=[Trait|ID]*)
	 */
	protected void sequence_TraitList(ISerializationContext context, TraitList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TraitTypedParameterList returns TraitTypedParameterList
	 *
	 * Constraint:
	 *     (parameters+=TypedParameterWithDefaultValue parameters+=TypedParameterWithDefaultValue*)
	 */
	protected void sequence_TraitTypedParameterList(ISerializationContext context, TraitTypedParameterList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns Trait
	 *     Trait returns Trait
	 *
	 * Constraint:
	 *     (name=ID parameters=TraitTypedParameterList)
	 */
	protected void sequence_Trait(ISerializationContext context, Trait semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VeplPackage.Literals.MODEL_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VeplPackage.Literals.MODEL_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, VeplPackage.Literals.TRAIT__PARAMETERS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VeplPackage.Literals.TRAIT__PARAMETERS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTraitAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTraitAccess().getParametersTraitTypedParameterListParserRuleCall_3_0(), semanticObject.getParameters());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypedParameterList returns TypedParameterList
	 *
	 * Constraint:
	 *     (parameters+=TypedParameter parameters+=TypedParameter*)
	 */
	protected void sequence_TypedParameterList(ISerializationContext context, TypedParameterList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypedParameterWithDefaultValue returns TypedParameterWithDefaultValue
	 *
	 * Constraint:
	 *     (typedParameter=TypedParameter value=XAssignment?)
	 */
	protected void sequence_TypedParameterWithDefaultValue(ISerializationContext context, TypedParameterWithDefaultValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypedParameter returns TypedParameter
	 *
	 * Constraint:
	 *     (name=ID type=JvmTypeReference)
	 */
	protected void sequence_TypedParameter(ISerializationContext context, TypedParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VeplPackage.Literals.TYPED_PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VeplPackage.Literals.TYPED_PARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, VeplPackage.Literals.TYPED_PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VeplPackage.Literals.TYPED_PARAMETER__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypedParameterAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTypedParameterAccess().getTypeJvmTypeReferenceParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     UntilOperator returns UntilOperator
	 *
	 * Constraint:
	 *     {UntilOperator}
	 */
	protected void sequence_UntilOperator(ISerializationContext context, UntilOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
