/*
 * generated by Xtext
 */
package org.eclipse.viatra.cep.vepl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class VeplGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EventModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.EventModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cContextKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContextAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cContextContextEnumRuleCall_3_1_0 = (RuleCall)cContextAssignment_3_1.eContents().get(0);
		private final Assignment cModelElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModelElementsModelElementParserRuleCall_4_0 = (RuleCall)cModelElementsAssignment_4.eContents().get(0);
		
		//EventModel:
		//	'package' name=QualifiedName
		//	imports+=Import* ('context' context=Context)?
		//	modelElements+=ModelElement*;
		@Override public ParserRule getRule() { return rule; }

		//'package' name=QualifiedName imports+=Import* ('context' context=Context)? modelElements+=ModelElement*
		public Group getGroup() { return cGroup; }

		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//('context' context=Context)?
		public Group getGroup_3() { return cGroup_3; }

		//'context'
		public Keyword getContextKeyword_3_0() { return cContextKeyword_3_0; }

		//context=Context
		public Assignment getContextAssignment_3_1() { return cContextAssignment_3_1; }

		//Context
		public RuleCall getContextContextEnumRuleCall_3_1_0() { return cContextContextEnumRuleCall_3_1_0; }

		//modelElements+=ModelElement*
		public Assignment getModelElementsAssignment_4() { return cModelElementsAssignment_4; }

		//ModelElement
		public RuleCall getModelElementsModelElementParserRuleCall_4_0() { return cModelElementsModelElementParserRuleCall_4_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.Import");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGenericImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQueryImportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Import:
		//	GenericImport | QueryImport;
		@Override public ParserRule getRule() { return rule; }

		//GenericImport | QueryImport
		public Alternatives getAlternatives() { return cAlternatives; }

		//GenericImport
		public RuleCall getGenericImportParserRuleCall_0() { return cGenericImportParserRuleCall_0; }

		//QueryImport
		public RuleCall getQueryImportParserRuleCall_1() { return cQueryImportParserRuleCall_1; }
	}

	public class GenericImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.GenericImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//GenericImport:
		//	'import' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }

		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class QueryImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.QueryImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportQueriesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//QueryImport:
		//	'import-queries' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }

		//'import-queries' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//'import-queries'
		public Keyword getImportQueriesKeyword_0() { return cImportQueriesKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.ModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTraitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventPatternParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ModelElement:
		//	Trait | EventPattern | Rule;
		@Override public ParserRule getRule() { return rule; }

		//Trait | EventPattern | Rule
		public Alternatives getAlternatives() { return cAlternatives; }

		//Trait
		public RuleCall getTraitParserRuleCall_0() { return cTraitParserRuleCall_0; }

		//EventPattern
		public RuleCall getEventPatternParserRuleCall_1() { return cEventPatternParserRuleCall_1; }

		//Rule
		public RuleCall getRuleParserRuleCall_2() { return cRuleParserRuleCall_2; }
	}

	public class TraitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.Trait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTraitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersTraitTypedParameterListParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *******************************************MAIN MODEL ELEMENTS******************************************* / Trait:
		//	'trait' name=ID '{'
		//	parameters=TraitTypedParameterList
		//	//('check' checkExpression = XBlockExpression)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'trait' name=ID '{' parameters=TraitTypedParameterList //('check' checkExpression = XBlockExpression)?
		//'}'
		public Group getGroup() { return cGroup; }

		//'trait'
		public Keyword getTraitKeyword_0() { return cTraitKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//parameters=TraitTypedParameterList
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//TraitTypedParameterList
		public RuleCall getParametersTraitTypedParameterListParserRuleCall_3_0() { return cParametersTraitTypedParameterListParserRuleCall_3_0; }

		////('check' checkExpression = XBlockExpression)?
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EventPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.EventPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractAtomicEventPatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexEventPatternParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EventPattern:
		//	AbstractAtomicEventPattern | ComplexEventPattern;
		@Override public ParserRule getRule() { return rule; }

		//AbstractAtomicEventPattern | ComplexEventPattern
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractAtomicEventPattern
		public RuleCall getAbstractAtomicEventPatternParserRuleCall_0() { return cAbstractAtomicEventPatternParserRuleCall_0; }

		//ComplexEventPattern
		public RuleCall getComplexEventPatternParserRuleCall_1() { return cComplexEventPatternParserRuleCall_1; }
	}

	public class AbstractAtomicEventPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.AbstractAtomicEventPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicEventPatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQueryResultChangeEventPatternParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractAtomicEventPattern:
		//	AtomicEventPattern | QueryResultChangeEventPattern;
		@Override public ParserRule getRule() { return rule; }

		//AtomicEventPattern | QueryResultChangeEventPattern
		public Alternatives getAlternatives() { return cAlternatives; }

		//AtomicEventPattern
		public RuleCall getAtomicEventPatternParserRuleCall_0() { return cAtomicEventPatternParserRuleCall_0; }

		//QueryResultChangeEventPattern
		public RuleCall getQueryResultChangeEventPatternParserRuleCall_1() { return cQueryResultChangeEventPatternParserRuleCall_1; }
	}

	public class AtomicEventPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.AtomicEventPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtomicEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersTypedParameterListParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTraitsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTraitsTraitListParserRuleCall_3_1_0 = (RuleCall)cTraitsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCheckKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cCheckExpressionAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cCheckExpressionXBlockExpressionParserRuleCall_4_1_1_0 = (RuleCall)cCheckExpressionAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//AtomicEventPattern:
		//	'atomicEvent' name=ID ('(' parameters=TypedParameterList? ')')? ('with' traits=TraitList)? ('{' ('check'
		//	checkExpression=XBlockExpression)?
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }

		//'atomicEvent' name=ID ('(' parameters=TypedParameterList? ')')? ('with' traits=TraitList)? ('{' ('check'
		//checkExpression=XBlockExpression)? '}')?
		public Group getGroup() { return cGroup; }

		//'atomicEvent'
		public Keyword getAtomicEventKeyword_0() { return cAtomicEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('(' parameters=TypedParameterList? ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//parameters=TypedParameterList?
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//TypedParameterList
		public RuleCall getParametersTypedParameterListParserRuleCall_2_1_0() { return cParametersTypedParameterListParserRuleCall_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//('with' traits=TraitList)?
		public Group getGroup_3() { return cGroup_3; }

		//'with'
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }

		//traits=TraitList
		public Assignment getTraitsAssignment_3_1() { return cTraitsAssignment_3_1; }

		//TraitList
		public RuleCall getTraitsTraitListParserRuleCall_3_1_0() { return cTraitsTraitListParserRuleCall_3_1_0; }

		//('{' ('check' checkExpression=XBlockExpression)? '}')?
		public Group getGroup_4() { return cGroup_4; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//('check' checkExpression=XBlockExpression)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//'check'
		public Keyword getCheckKeyword_4_1_0() { return cCheckKeyword_4_1_0; }

		//checkExpression=XBlockExpression
		public Assignment getCheckExpressionAssignment_4_1_1() { return cCheckExpressionAssignment_4_1_1; }

		//XBlockExpression
		public RuleCall getCheckExpressionXBlockExpressionParserRuleCall_4_1_1_0() { return cCheckExpressionXBlockExpressionParserRuleCall_4_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}

	public class QueryResultChangeEventPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.QueryResultChangeEventPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersTypedParameterListParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cQueryReferenceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cQueryReferenceParametrizedQueryReferenceParserRuleCall_6_0 = (RuleCall)cQueryReferenceAssignment_6.eContents().get(0);
		private final Assignment cResultChangeTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cResultChangeTypeQueryResultChangeTypeEnumRuleCall_7_0 = (RuleCall)cResultChangeTypeAssignment_7.eContents().get(0);
		
		//QueryResultChangeEventPattern:
		//	'queryEvent' name=ID '(' parameters=TypedParameterList? ')' 'as'
		//	queryReference=ParametrizedQueryReference resultChangeType=QueryResultChangeType?;
		@Override public ParserRule getRule() { return rule; }

		//'queryEvent' name=ID '(' parameters=TypedParameterList? ')' 'as' queryReference=ParametrizedQueryReference
		//resultChangeType=QueryResultChangeType?
		public Group getGroup() { return cGroup; }

		//'queryEvent'
		public Keyword getQueryEventKeyword_0() { return cQueryEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters=TypedParameterList?
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//TypedParameterList
		public RuleCall getParametersTypedParameterListParserRuleCall_3_0() { return cParametersTypedParameterListParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//'as'
		public Keyword getAsKeyword_5() { return cAsKeyword_5; }

		//queryReference=ParametrizedQueryReference
		public Assignment getQueryReferenceAssignment_6() { return cQueryReferenceAssignment_6; }

		//ParametrizedQueryReference
		public RuleCall getQueryReferenceParametrizedQueryReferenceParserRuleCall_6_0() { return cQueryReferenceParametrizedQueryReferenceParserRuleCall_6_0; }

		//resultChangeType=QueryResultChangeType?
		public Assignment getResultChangeTypeAssignment_7() { return cResultChangeTypeAssignment_7; }

		//QueryResultChangeType
		public RuleCall getResultChangeTypeQueryResultChangeTypeEnumRuleCall_7_0() { return cResultChangeTypeQueryResultChangeTypeEnumRuleCall_7_0; }
	}

	public class ComplexEventPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.ComplexEventPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComplexEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersTypedParameterListParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cAsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cComplexEventExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cComplexEventExpressionComplexEventExpressionParserRuleCall_7_0 = (RuleCall)cComplexEventExpressionAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cContextKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cContextAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cContextContextEnumRuleCall_8_1_0 = (RuleCall)cContextAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ComplexEventPattern:
		//	'complexEvent' name=ID '(' parameters=TypedParameterList? ')' '{'
		//	'as' complexEventExpression=ComplexEventExpression ('context' context=Context)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'complexEvent' name=ID '(' parameters=TypedParameterList? ')' '{' 'as' complexEventExpression=ComplexEventExpression
		//('context' context=Context)? '}'
		public Group getGroup() { return cGroup; }

		//'complexEvent'
		public Keyword getComplexEventKeyword_0() { return cComplexEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters=TypedParameterList?
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//TypedParameterList
		public RuleCall getParametersTypedParameterListParserRuleCall_3_0() { return cParametersTypedParameterListParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//'as'
		public Keyword getAsKeyword_6() { return cAsKeyword_6; }

		//complexEventExpression=ComplexEventExpression
		public Assignment getComplexEventExpressionAssignment_7() { return cComplexEventExpressionAssignment_7; }

		//ComplexEventExpression
		public RuleCall getComplexEventExpressionComplexEventExpressionParserRuleCall_7_0() { return cComplexEventExpressionComplexEventExpressionParserRuleCall_7_0; }

		//('context' context=Context)?
		public Group getGroup_8() { return cGroup_8; }

		//'context'
		public Keyword getContextKeyword_8_0() { return cContextKeyword_8_0; }

		//context=Context
		public Assignment getContextAssignment_8_1() { return cContextAssignment_8_1; }

		//Context
		public RuleCall getContextContextEnumRuleCall_8_1_0() { return cContextContextEnumRuleCall_8_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventPatternsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventPatternsParameterizedPatternCallParserRuleCall_3_0 = (RuleCall)cEventPatternsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEventPatternsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEventPatternsParameterizedPatternCallParserRuleCall_4_1_0 = (RuleCall)cEventPatternsAssignment_4_1.eContents().get(0);
		private final Assignment cActionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionXBlockExpressionParserRuleCall_5_0 = (RuleCall)cActionAssignment_5.eContents().get(0);
		
		//Rule:
		//	'rule' name=ID 'on' eventPatterns+=ParameterizedPatternCall (',' eventPatterns+=ParameterizedPatternCall)*
		//	action=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//'rule' name=ID 'on' eventPatterns+=ParameterizedPatternCall (',' eventPatterns+=ParameterizedPatternCall)*
		//action=XBlockExpression
		public Group getGroup() { return cGroup; }

		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }

		//eventPatterns+=ParameterizedPatternCall
		public Assignment getEventPatternsAssignment_3() { return cEventPatternsAssignment_3; }

		//ParameterizedPatternCall
		public RuleCall getEventPatternsParameterizedPatternCallParserRuleCall_3_0() { return cEventPatternsParameterizedPatternCallParserRuleCall_3_0; }

		//(',' eventPatterns+=ParameterizedPatternCall)*
		public Group getGroup_4() { return cGroup_4; }

		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//eventPatterns+=ParameterizedPatternCall
		public Assignment getEventPatternsAssignment_4_1() { return cEventPatternsAssignment_4_1; }

		//ParameterizedPatternCall
		public RuleCall getEventPatternsParameterizedPatternCallParserRuleCall_4_1_0() { return cEventPatternsParameterizedPatternCallParserRuleCall_4_1_0; }

		//action=XBlockExpression
		public Assignment getActionAssignment_5() { return cActionAssignment_5; }

		//XBlockExpression
		public RuleCall getActionXBlockExpressionParserRuleCall_5_0() { return cActionXBlockExpressionParserRuleCall_5_0; }
	}

	public class TraitListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.TraitList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTraitListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTraitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTraitsTraitCrossReference_1_0 = (CrossReference)cTraitsAssignment_1.eContents().get(0);
		private final RuleCall cTraitsTraitIDTerminalRuleCall_1_0_1 = (RuleCall)cTraitsTraitCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTraitsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTraitsTraitCrossReference_2_1_0 = (CrossReference)cTraitsAssignment_2_1.eContents().get(0);
		private final RuleCall cTraitsTraitIDTerminalRuleCall_2_1_0_1 = (RuleCall)cTraitsTraitCrossReference_2_1_0.eContents().get(1);
		
		/// *******************************************IQ PATTERN ELEMENTS******************************************* /
		/// *******************************************FUNCTION ARGUMENT PARAMETERS******************************************* /
		//TraitList:
		//	{TraitList} traits+=[Trait] (',' traits+=[Trait])*;
		@Override public ParserRule getRule() { return rule; }

		//{TraitList} traits+=[Trait] (',' traits+=[Trait])*
		public Group getGroup() { return cGroup; }

		//{TraitList}
		public Action getTraitListAction_0() { return cTraitListAction_0; }

		//traits+=[Trait]
		public Assignment getTraitsAssignment_1() { return cTraitsAssignment_1; }

		//[Trait]
		public CrossReference getTraitsTraitCrossReference_1_0() { return cTraitsTraitCrossReference_1_0; }

		//ID
		public RuleCall getTraitsTraitIDTerminalRuleCall_1_0_1() { return cTraitsTraitIDTerminalRuleCall_1_0_1; }

		//(',' traits+=[Trait])*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//traits+=[Trait]
		public Assignment getTraitsAssignment_2_1() { return cTraitsAssignment_2_1; }

		//[Trait]
		public CrossReference getTraitsTraitCrossReference_2_1_0() { return cTraitsTraitCrossReference_2_1_0; }

		//ID
		public RuleCall getTraitsTraitIDTerminalRuleCall_2_1_0_1() { return cTraitsTraitIDTerminalRuleCall_2_1_0_1; }
	}

	public class TypedParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.TypedParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypedParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersTypedParameterParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersTypedParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		
		//TypedParameterList:
		//	{TypedParameterList} parameters+=TypedParameter (',' parameters+=TypedParameter)*;
		@Override public ParserRule getRule() { return rule; }

		//{TypedParameterList} parameters+=TypedParameter (',' parameters+=TypedParameter)*
		public Group getGroup() { return cGroup; }

		//{TypedParameterList}
		public Action getTypedParameterListAction_0() { return cTypedParameterListAction_0; }

		//parameters+=TypedParameter
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//TypedParameter
		public RuleCall getParametersTypedParameterParserRuleCall_1_0() { return cParametersTypedParameterParserRuleCall_1_0; }

		//(',' parameters+=TypedParameter)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//parameters+=TypedParameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//TypedParameter
		public RuleCall getParametersTypedParameterParserRuleCall_2_1_0() { return cParametersTypedParameterParserRuleCall_2_1_0; }
	}

	public class TypedParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.TypedParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypedParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//TypedParameter:
		//	{TypedParameter} name=ID ':' type=JvmTypeReference;
		@Override public ParserRule getRule() { return rule; }

		//{TypedParameter} name=ID ':' type=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//{TypedParameter}
		public Action getTypedParameterAction_0() { return cTypedParameterAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_3_0() { return cTypeJvmTypeReferenceParserRuleCall_3_0; }
	}

	public class TypedParameterWithDefaultValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.TypedParameterWithDefaultValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypedParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypedParameterTypedParameterParserRuleCall_0_0 = (RuleCall)cTypedParameterAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueXAssignmentParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//TypedParameterWithDefaultValue:
		//	typedParameter=TypedParameter ('=' value=XAssignment)?;
		@Override public ParserRule getRule() { return rule; }

		//typedParameter=TypedParameter ('=' value=XAssignment)?
		public Group getGroup() { return cGroup; }

		//typedParameter=TypedParameter
		public Assignment getTypedParameterAssignment_0() { return cTypedParameterAssignment_0; }

		//TypedParameter
		public RuleCall getTypedParameterTypedParameterParserRuleCall_0_0() { return cTypedParameterTypedParameterParserRuleCall_0_0; }

		//('=' value=XAssignment)?
		public Group getGroup_1() { return cGroup_1; }

		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=XAssignment
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//XAssignment
		public RuleCall getValueXAssignmentParserRuleCall_1_1_0() { return cValueXAssignmentParserRuleCall_1_1_0; }
	}

	public class TraitTypedParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.TraitTypedParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersTypedParameterWithDefaultValueParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersTypedParameterWithDefaultValueParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//TraitTypedParameterList:
		//	parameters+=TypedParameterWithDefaultValue (',' parameters+=TypedParameterWithDefaultValue)*;
		@Override public ParserRule getRule() { return rule; }

		//parameters+=TypedParameterWithDefaultValue (',' parameters+=TypedParameterWithDefaultValue)*
		public Group getGroup() { return cGroup; }

		//parameters+=TypedParameterWithDefaultValue
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//TypedParameterWithDefaultValue
		public RuleCall getParametersTypedParameterWithDefaultValueParserRuleCall_0_0() { return cParametersTypedParameterWithDefaultValueParserRuleCall_0_0; }

		//(',' parameters+=TypedParameterWithDefaultValue)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameters+=TypedParameterWithDefaultValue
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//TypedParameterWithDefaultValue
		public RuleCall getParametersTypedParameterWithDefaultValueParserRuleCall_1_1_0() { return cParametersTypedParameterWithDefaultValueParserRuleCall_1_1_0; }
	}

	public class ParametrizedQueryReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.ParametrizedQueryReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQueryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cQueryPatternCrossReference_0_0 = (CrossReference)cQueryAssignment_0.eContents().get(0);
		private final RuleCall cQueryPatternIDTerminalRuleCall_0_0_1 = (RuleCall)cQueryPatternCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterListPatternCallParameterListParserRuleCall_1_1_0 = (RuleCall)cParameterListAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		/// *******************************************FUNCTION ARGUMENT PARAMETERS******************************************* /
		/// *******************************************VIATRA QUERY INTEGRATION******************************************* /
		//ParametrizedQueryReference:
		//	query=[iqpl::Pattern] ('(' parameterList=PatternCallParameterList? ')')?;
		@Override public ParserRule getRule() { return rule; }

		//query=[iqpl::Pattern] ('(' parameterList=PatternCallParameterList? ')')?
		public Group getGroup() { return cGroup; }

		//query=[iqpl::Pattern]
		public Assignment getQueryAssignment_0() { return cQueryAssignment_0; }

		//[iqpl::Pattern]
		public CrossReference getQueryPatternCrossReference_0_0() { return cQueryPatternCrossReference_0_0; }

		//ID
		public RuleCall getQueryPatternIDTerminalRuleCall_0_0_1() { return cQueryPatternIDTerminalRuleCall_0_0_1; }

		//('(' parameterList=PatternCallParameterList? ')')?
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//parameterList=PatternCallParameterList?
		public Assignment getParameterListAssignment_1_1() { return cParameterListAssignment_1_1; }

		//PatternCallParameterList
		public RuleCall getParameterListPatternCallParameterListParserRuleCall_1_1_0() { return cParameterListPatternCallParameterListParserRuleCall_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ComplexEventExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.ComplexEventExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComplexEventExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightChainedExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		/// *******************************************VIATRA QUERY INTEGRATION******************************************* /
		/// *******************************************COMPLEX EVENT EXPRESSIONS******************************************* /
		//ComplexEventExpression:
		//	Primary ({ComplexEventExpression.left=current} right+=ChainedExpression*);
		@Override public ParserRule getRule() { return rule; }

		//Primary ({ComplexEventExpression.left=current} right+=ChainedExpression*)
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({ComplexEventExpression.left=current} right+=ChainedExpression*)
		public Group getGroup_1() { return cGroup_1; }

		//{ComplexEventExpression.left=current}
		public Action getComplexEventExpressionLeftAction_1_0() { return cComplexEventExpressionLeftAction_1_0; }

		//right+=ChainedExpression*
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ChainedExpression
		public RuleCall getRightChainedExpressionParserRuleCall_1_1_0() { return cRightChainedExpressionParserRuleCall_1_1_0; }
	}

	public class ChainedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.ChainedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorBinaryOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ChainedExpression:
		//	operator=BinaryOperator expression=Primary;
		@Override public ParserRule getRule() { return rule; }

		//operator=BinaryOperator expression=Primary
		public Group getGroup() { return cGroup; }

		//operator=BinaryOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//BinaryOperator
		public RuleCall getOperatorBinaryOperatorParserRuleCall_0_0() { return cOperatorBinaryOperatorParserRuleCall_0_0; }

		//expression=Primary
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_0() { return cExpressionPrimaryParserRuleCall_1_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNormalPrimaryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNegatedPrimaryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Primary ComplexEventExpression:
		//	NormalPrimary | NegatedPrimary
		@Override public ParserRule getRule() { return rule; }

		//NormalPrimary | NegatedPrimary
		public Alternatives getAlternatives() { return cAlternatives; }

		//NormalPrimary
		public RuleCall getNormalPrimaryParserRuleCall_0() { return cNormalPrimaryParserRuleCall_0; }

		//NegatedPrimary
		public RuleCall getNegatedPrimaryParserRuleCall_1() { return cNegatedPrimaryParserRuleCall_1; }
	}

	public class NormalPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.NormalPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cAtomParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cMultiplicityAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMultiplicityAbstractMultiplicityParserRuleCall_0_1_0 = (RuleCall)cMultiplicityAssignment_0_1.eContents().get(0);
		private final Assignment cTimewindowAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTimewindowTimewindowParserRuleCall_0_2_0 = (RuleCall)cTimewindowAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cComplexEventExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cMultiplicityAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cMultiplicityAbstractMultiplicityParserRuleCall_1_3_0 = (RuleCall)cMultiplicityAssignment_1_3.eContents().get(0);
		private final Assignment cTimewindowAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTimewindowTimewindowParserRuleCall_1_4_0 = (RuleCall)cTimewindowAssignment_1_4.eContents().get(0);
		
		//NormalPrimary ComplexEventExpression:
		//	Atom multiplicity=AbstractMultiplicity? timewindow=Timewindow? |
		//	'(' ComplexEventExpression ')' multiplicity=AbstractMultiplicity? timewindow=Timewindow?
		@Override public ParserRule getRule() { return rule; }

		//Atom multiplicity=AbstractMultiplicity? timewindow=Timewindow? | '(' ComplexEventExpression ')'
		//multiplicity=AbstractMultiplicity? timewindow=Timewindow?
		public Alternatives getAlternatives() { return cAlternatives; }

		//Atom multiplicity=AbstractMultiplicity? timewindow=Timewindow?
		public Group getGroup_0() { return cGroup_0; }

		//Atom
		public RuleCall getAtomParserRuleCall_0_0() { return cAtomParserRuleCall_0_0; }

		//multiplicity=AbstractMultiplicity?
		public Assignment getMultiplicityAssignment_0_1() { return cMultiplicityAssignment_0_1; }

		//AbstractMultiplicity
		public RuleCall getMultiplicityAbstractMultiplicityParserRuleCall_0_1_0() { return cMultiplicityAbstractMultiplicityParserRuleCall_0_1_0; }

		//timewindow=Timewindow?
		public Assignment getTimewindowAssignment_0_2() { return cTimewindowAssignment_0_2; }

		//Timewindow
		public RuleCall getTimewindowTimewindowParserRuleCall_0_2_0() { return cTimewindowTimewindowParserRuleCall_0_2_0; }

		//'(' ComplexEventExpression ')' multiplicity=AbstractMultiplicity? timewindow=Timewindow?
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//ComplexEventExpression
		public RuleCall getComplexEventExpressionParserRuleCall_1_1() { return cComplexEventExpressionParserRuleCall_1_1; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//multiplicity=AbstractMultiplicity?
		public Assignment getMultiplicityAssignment_1_3() { return cMultiplicityAssignment_1_3; }

		//AbstractMultiplicity
		public RuleCall getMultiplicityAbstractMultiplicityParserRuleCall_1_3_0() { return cMultiplicityAbstractMultiplicityParserRuleCall_1_3_0; }

		//timewindow=Timewindow?
		public Assignment getTimewindowAssignment_1_4() { return cTimewindowAssignment_1_4; }

		//Timewindow
		public RuleCall getTimewindowTimewindowParserRuleCall_1_4_0() { return cTimewindowTimewindowParserRuleCall_1_4_0; }
	}

	public class NegatedPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.NegatedPrimary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNegOperatorNegOperatorParserRuleCall_0_0 = (RuleCall)cNegOperatorAssignment_0.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftNormalPrimaryParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		
		//NegatedPrimary ComplexEventExpression:
		//	negOperator=NegOperator left=NormalPrimary
		@Override public ParserRule getRule() { return rule; }

		//negOperator=NegOperator left=NormalPrimary
		public Group getGroup() { return cGroup; }

		//negOperator=NegOperator
		public Assignment getNegOperatorAssignment_0() { return cNegOperatorAssignment_0; }

		//NegOperator
		public RuleCall getNegOperatorNegOperatorParserRuleCall_0_0() { return cNegOperatorNegOperatorParserRuleCall_0_0; }

		//left=NormalPrimary
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }

		//NormalPrimary
		public RuleCall getLeftNormalPrimaryParserRuleCall_1_0() { return cLeftNormalPrimaryParserRuleCall_1_0; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.Atom");
		private final Assignment cPatternCallAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPatternCallParameterizedPatternCallParserRuleCall_0 = (RuleCall)cPatternCallAssignment.eContents().get(0);
		
		//Atom:
		//	patternCall=ParameterizedPatternCall;
		@Override public ParserRule getRule() { return rule; }

		//patternCall=ParameterizedPatternCall
		public Assignment getPatternCallAssignment() { return cPatternCallAssignment; }

		//ParameterizedPatternCall
		public RuleCall getPatternCallParameterizedPatternCallParserRuleCall_0() { return cPatternCallParameterizedPatternCallParserRuleCall_0; }
	}

	public class AbstractMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.AbstractMultiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMultiplicityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInfiniteParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAtLeastOneParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractMultiplicity:
		//	Multiplicity | Infinite | AtLeastOne;
		@Override public ParserRule getRule() { return rule; }

		//Multiplicity | Infinite | AtLeastOne
		public Alternatives getAlternatives() { return cAlternatives; }

		//Multiplicity
		public RuleCall getMultiplicityParserRuleCall_0() { return cMultiplicityParserRuleCall_0; }

		//Infinite
		public RuleCall getInfiniteParserRuleCall_1() { return cInfiniteParserRuleCall_1; }

		//AtLeastOne
		public RuleCall getAtLeastOneParserRuleCall_2() { return cAtLeastOneParserRuleCall_2; }
	}

	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.Multiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultiplicityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Multiplicity AbstractMultiplicity:
		//	{Multiplicity}
		//	'{' value=INT '}'
		@Override public ParserRule getRule() { return rule; }

		//{Multiplicity} '{' value=INT '}'
		public Group getGroup() { return cGroup; }

		//{Multiplicity}
		public Action getMultiplicityAction_0() { return cMultiplicityAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class InfiniteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.Infinite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInfiniteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Infinite AbstractMultiplicity:
		//	{Infinite}
		//	'{' '*' '}'
		@Override public ParserRule getRule() { return rule; }

		//{Infinite} '{' '*' '}'
		public Group getGroup() { return cGroup; }

		//{Infinite}
		public Action getInfiniteAction_0() { return cInfiniteAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class AtLeastOneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.AtLeastOne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAtLeastOneAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AtLeastOne AbstractMultiplicity:
		//	{AtLeastOne}
		//	'{' '+' '}'
		@Override public ParserRule getRule() { return rule; }

		//{AtLeastOne} '{' '+' '}'
		public Group getGroup() { return cGroup; }

		//{AtLeastOne}
		public Action getAtLeastOneAction_0() { return cAtLeastOneAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class TimewindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.Timewindow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_1_0 = (RuleCall)cLengthAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Timewindow:
		//	'[' length=INT ']';
		@Override public ParserRule getRule() { return rule; }

		//'[' length=INT ']'
		public Group getGroup() { return cGroup; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//length=INT
		public Assignment getLengthAssignment_1() { return cLengthAssignment_1; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_1_0() { return cLengthINTTerminalRuleCall_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class ParameterizedPatternCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.ParameterizedPatternCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventPatternEventPatternCrossReference_0_0 = (CrossReference)cEventPatternAssignment_0.eContents().get(0);
		private final RuleCall cEventPatternEventPatternIDTerminalRuleCall_0_0_1 = (RuleCall)cEventPatternEventPatternCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterListPatternCallParameterListParserRuleCall_1_1_0 = (RuleCall)cParameterListAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ParameterizedPatternCall:
		//	eventPattern=[EventPattern] ('(' parameterList=PatternCallParameterList? ')')?;
		@Override public ParserRule getRule() { return rule; }

		//eventPattern=[EventPattern] ('(' parameterList=PatternCallParameterList? ')')?
		public Group getGroup() { return cGroup; }

		//eventPattern=[EventPattern]
		public Assignment getEventPatternAssignment_0() { return cEventPatternAssignment_0; }

		//[EventPattern]
		public CrossReference getEventPatternEventPatternCrossReference_0_0() { return cEventPatternEventPatternCrossReference_0_0; }

		//ID
		public RuleCall getEventPatternEventPatternIDTerminalRuleCall_0_0_1() { return cEventPatternEventPatternIDTerminalRuleCall_0_0_1; }

		//('(' parameterList=PatternCallParameterList? ')')?
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//parameterList=PatternCallParameterList?
		public Assignment getParameterListAssignment_1_1() { return cParameterListAssignment_1_1; }

		//PatternCallParameterList
		public RuleCall getParameterListPatternCallParameterListParserRuleCall_1_1_0() { return cParameterListPatternCallParameterListParserRuleCall_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class PatternCallParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.PatternCallParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPatternCallParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersPatternCallParameterParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersPatternCallParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		
		//PatternCallParameterList:
		//	{PatternCallParameterList} parameters+=PatternCallParameter (',' parameters+=PatternCallParameter)*;
		@Override public ParserRule getRule() { return rule; }

		//{PatternCallParameterList} parameters+=PatternCallParameter (',' parameters+=PatternCallParameter)*
		public Group getGroup() { return cGroup; }

		//{PatternCallParameterList}
		public Action getPatternCallParameterListAction_0() { return cPatternCallParameterListAction_0; }

		//parameters+=PatternCallParameter
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//PatternCallParameter
		public RuleCall getParametersPatternCallParameterParserRuleCall_1_0() { return cParametersPatternCallParameterParserRuleCall_1_0; }

		//(',' parameters+=PatternCallParameter)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//parameters+=PatternCallParameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//PatternCallParameter
		public RuleCall getParametersPatternCallParameterParserRuleCall_2_1_0() { return cParametersPatternCallParameterParserRuleCall_2_1_0; }
	}

	public class PatternCallParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.PatternCallParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPatternCallParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PatternCallParameter:
		//	{PatternCallParameter} name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{PatternCallParameter} name=ID
		public Group getGroup() { return cGroup; }

		//{PatternCallParameter}
		public Action getPatternCallParameterAction_0() { return cPatternCallParameterAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ComplexEventOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.ComplexEventOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *******************************************COMPLEX EVENT EXPRESSIONS******************************************* /
		/// *******************************************OPERATORS******************************************* / ComplexEventOperator:
		//	BinaryOperator | UnaryOperator;
		@Override public ParserRule getRule() { return rule; }

		//BinaryOperator | UnaryOperator
		public Alternatives getAlternatives() { return cAlternatives; }

		//BinaryOperator
		public RuleCall getBinaryOperatorParserRuleCall_0() { return cBinaryOperatorParserRuleCall_0; }

		//UnaryOperator
		public RuleCall getUnaryOperatorParserRuleCall_1() { return cUnaryOperatorParserRuleCall_1; }
	}

	public class BinaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.BinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFollowsOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAndOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BinaryOperator:
		//	FollowsOperator | OrOperator | AndOperator //| UntilOperator
		//;
		@Override public ParserRule getRule() { return rule; }

		//FollowsOperator | OrOperator | AndOperator
		public Alternatives getAlternatives() { return cAlternatives; }

		//FollowsOperator
		public RuleCall getFollowsOperatorParserRuleCall_0() { return cFollowsOperatorParserRuleCall_0; }

		//OrOperator
		public RuleCall getOrOperatorParserRuleCall_1() { return cOrOperatorParserRuleCall_1; }

		//AndOperator
		public RuleCall getAndOperatorParserRuleCall_2() { return cAndOperatorParserRuleCall_2; }
	}

	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.UnaryOperator");
		private final RuleCall cNegOperatorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnaryOperator:
		//	NegOperator;
		@Override public ParserRule getRule() { return rule; }

		//NegOperator
		public RuleCall getNegOperatorParserRuleCall() { return cNegOperatorParserRuleCall; }
	}

	public class FollowsOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.FollowsOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFollowsOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FollowsOperator:
		//	{FollowsOperator}
		//	'->';
		@Override public ParserRule getRule() { return rule; }

		//{FollowsOperator} '->'
		public Group getGroup() { return cGroup; }

		//{FollowsOperator}
		public Action getFollowsOperatorAction_0() { return cFollowsOperatorAction_0; }

		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
	}

	public class OrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.OrOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cORKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OrOperator:
		//	{OrOperator}
		//	'OR';
		@Override public ParserRule getRule() { return rule; }

		//{OrOperator} 'OR'
		public Group getGroup() { return cGroup; }

		//{OrOperator}
		public Action getOrOperatorAction_0() { return cOrOperatorAction_0; }

		//'OR'
		public Keyword getORKeyword_1() { return cORKeyword_1; }
	}

	public class AndOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.AndOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cANDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AndOperator:
		//	{AndOperator}
		//	'AND';
		@Override public ParserRule getRule() { return rule; }

		//{AndOperator} 'AND'
		public Group getGroup() { return cGroup; }

		//{AndOperator}
		public Action getAndOperatorAction_0() { return cAndOperatorAction_0; }

		//'AND'
		public Keyword getANDKeyword_1() { return cANDKeyword_1; }
	}

	public class UntilOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.UntilOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUntilOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UntilOperator:
		//	{UntilOperator}
		//	'U';
		@Override public ParserRule getRule() { return rule; }

		//{UntilOperator} 'U'
		public Group getGroup() { return cGroup; }

		//{UntilOperator}
		public Action getUntilOperatorAction_0() { return cUntilOperatorAction_0; }

		//'U'
		public Keyword getUKeyword_1() { return cUKeyword_1; }
	}

	public class NegOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.NegOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNegOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNOTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NegOperator:
		//	{NegOperator}
		//	'NOT';
		@Override public ParserRule getRule() { return rule; }

		//{NegOperator} 'NOT'
		public Group getGroup() { return cGroup; }

		//{NegOperator}
		public Action getNegOperatorAction_0() { return cNegOperatorAction_0; }

		//'NOT'
		public Keyword getNOTKeyword_1() { return cNOTKeyword_1; }
	}
	
	
	public class ContextEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.ContextEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNot_setEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNot_setNot_setKeyword_0_0 = (Keyword)cNot_setEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cChronicleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cChronicleChronicleKeyword_1_0 = (Keyword)cChronicleEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cImmediateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cImmediateImmediateKeyword_2_0 = (Keyword)cImmediateEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStrictEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStrictStrictKeyword_3_0 = (Keyword)cStrictEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ContextEnum:
		//	not_set | chronicle | immediate | strict;
		public EnumRule getRule() { return rule; }

		//not_set | chronicle | immediate | strict
		public Alternatives getAlternatives() { return cAlternatives; }

		//not_set
		public EnumLiteralDeclaration getNot_setEnumLiteralDeclaration_0() { return cNot_setEnumLiteralDeclaration_0; }

		//"not_set"
		public Keyword getNot_setNot_setKeyword_0_0() { return cNot_setNot_setKeyword_0_0; }

		//chronicle
		public EnumLiteralDeclaration getChronicleEnumLiteralDeclaration_1() { return cChronicleEnumLiteralDeclaration_1; }

		//"chronicle"
		public Keyword getChronicleChronicleKeyword_1_0() { return cChronicleChronicleKeyword_1_0; }

		//immediate
		public EnumLiteralDeclaration getImmediateEnumLiteralDeclaration_2() { return cImmediateEnumLiteralDeclaration_2; }

		//"immediate"
		public Keyword getImmediateImmediateKeyword_2_0() { return cImmediateImmediateKeyword_2_0; }

		//strict
		public EnumLiteralDeclaration getStrictEnumLiteralDeclaration_3() { return cStrictEnumLiteralDeclaration_3; }

		//"strict"
		public Keyword getStrictStrictKeyword_3_0() { return cStrictStrictKeyword_3_0; }
	}

	public class ContextElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.Context");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cChronicleEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cChronicleChronicleKeyword_0_0 = (Keyword)cChronicleEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cImmediateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cImmediateImmediateKeyword_1_0 = (Keyword)cImmediateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStrictEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStrictStrictKeyword_2_0 = (Keyword)cStrictEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Context returns ContextEnum:
		//	chronicle | immediate | strict;
		public EnumRule getRule() { return rule; }

		//chronicle | immediate | strict
		public Alternatives getAlternatives() { return cAlternatives; }

		//chronicle
		public EnumLiteralDeclaration getChronicleEnumLiteralDeclaration_0() { return cChronicleEnumLiteralDeclaration_0; }

		//"chronicle"
		public Keyword getChronicleChronicleKeyword_0_0() { return cChronicleChronicleKeyword_0_0; }

		//immediate
		public EnumLiteralDeclaration getImmediateEnumLiteralDeclaration_1() { return cImmediateEnumLiteralDeclaration_1; }

		//"immediate"
		public Keyword getImmediateImmediateKeyword_1_0() { return cImmediateImmediateKeyword_1_0; }

		//strict
		public EnumLiteralDeclaration getStrictEnumLiteralDeclaration_2() { return cStrictEnumLiteralDeclaration_2; }

		//"strict"
		public Keyword getStrictStrictKeyword_2_0() { return cStrictStrictKeyword_2_0; }
	}

	public class QueryResultChangeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.cep.vepl.Vepl.QueryResultChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFoundEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFoundFoundKeyword_0_0 = (Keyword)cFoundEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLostEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLostLostKeyword_1_0 = (Keyword)cLostEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum QueryResultChangeType:
		//	found | lost;
		public EnumRule getRule() { return rule; }

		//found | lost
		public Alternatives getAlternatives() { return cAlternatives; }

		//found
		public EnumLiteralDeclaration getFoundEnumLiteralDeclaration_0() { return cFoundEnumLiteralDeclaration_0; }

		//"found"
		public Keyword getFoundFoundKeyword_0_0() { return cFoundFoundKeyword_0_0; }

		//lost
		public EnumLiteralDeclaration getLostEnumLiteralDeclaration_1() { return cLostEnumLiteralDeclaration_1; }

		//"lost"
		public Keyword getLostLostKeyword_1_0() { return cLostLostKeyword_1_0; }
	}
	
	private final EventModelElements pEventModel;
	private final ImportElements pImport;
	private final GenericImportElements pGenericImport;
	private final QueryImportElements pQueryImport;
	private final ContextEnumElements eContextEnum;
	private final ContextElements eContext;
	private final ModelElementElements pModelElement;
	private final TraitElements pTrait;
	private final EventPatternElements pEventPattern;
	private final AbstractAtomicEventPatternElements pAbstractAtomicEventPattern;
	private final AtomicEventPatternElements pAtomicEventPattern;
	private final QueryResultChangeEventPatternElements pQueryResultChangeEventPattern;
	private final ComplexEventPatternElements pComplexEventPattern;
	private final RuleElements pRule;
	private final QueryResultChangeTypeElements eQueryResultChangeType;
	private final TraitListElements pTraitList;
	private final TypedParameterListElements pTypedParameterList;
	private final TypedParameterElements pTypedParameter;
	private final TypedParameterWithDefaultValueElements pTypedParameterWithDefaultValue;
	private final TraitTypedParameterListElements pTraitTypedParameterList;
	private final ParametrizedQueryReferenceElements pParametrizedQueryReference;
	private final ComplexEventExpressionElements pComplexEventExpression;
	private final ChainedExpressionElements pChainedExpression;
	private final PrimaryElements pPrimary;
	private final NormalPrimaryElements pNormalPrimary;
	private final NegatedPrimaryElements pNegatedPrimary;
	private final AtomElements pAtom;
	private final AbstractMultiplicityElements pAbstractMultiplicity;
	private final MultiplicityElements pMultiplicity;
	private final InfiniteElements pInfinite;
	private final AtLeastOneElements pAtLeastOne;
	private final TimewindowElements pTimewindow;
	private final ParameterizedPatternCallElements pParameterizedPatternCall;
	private final PatternCallParameterListElements pPatternCallParameterList;
	private final PatternCallParameterElements pPatternCallParameter;
	private final ComplexEventOperatorElements pComplexEventOperator;
	private final BinaryOperatorElements pBinaryOperator;
	private final UnaryOperatorElements pUnaryOperator;
	private final FollowsOperatorElements pFollowsOperator;
	private final OrOperatorElements pOrOperator;
	private final AndOperatorElements pAndOperator;
	private final UntilOperatorElements pUntilOperator;
	private final NegOperatorElements pNegOperator;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	private final XtypeGrammarAccess gaXtype;

	@Inject
	public VeplGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase,
		XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pEventModel = new EventModelElements();
		this.pImport = new ImportElements();
		this.pGenericImport = new GenericImportElements();
		this.pQueryImport = new QueryImportElements();
		this.eContextEnum = new ContextEnumElements();
		this.eContext = new ContextElements();
		this.pModelElement = new ModelElementElements();
		this.pTrait = new TraitElements();
		this.pEventPattern = new EventPatternElements();
		this.pAbstractAtomicEventPattern = new AbstractAtomicEventPatternElements();
		this.pAtomicEventPattern = new AtomicEventPatternElements();
		this.pQueryResultChangeEventPattern = new QueryResultChangeEventPatternElements();
		this.pComplexEventPattern = new ComplexEventPatternElements();
		this.pRule = new RuleElements();
		this.eQueryResultChangeType = new QueryResultChangeTypeElements();
		this.pTraitList = new TraitListElements();
		this.pTypedParameterList = new TypedParameterListElements();
		this.pTypedParameter = new TypedParameterElements();
		this.pTypedParameterWithDefaultValue = new TypedParameterWithDefaultValueElements();
		this.pTraitTypedParameterList = new TraitTypedParameterListElements();
		this.pParametrizedQueryReference = new ParametrizedQueryReferenceElements();
		this.pComplexEventExpression = new ComplexEventExpressionElements();
		this.pChainedExpression = new ChainedExpressionElements();
		this.pPrimary = new PrimaryElements();
		this.pNormalPrimary = new NormalPrimaryElements();
		this.pNegatedPrimary = new NegatedPrimaryElements();
		this.pAtom = new AtomElements();
		this.pAbstractMultiplicity = new AbstractMultiplicityElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pInfinite = new InfiniteElements();
		this.pAtLeastOne = new AtLeastOneElements();
		this.pTimewindow = new TimewindowElements();
		this.pParameterizedPatternCall = new ParameterizedPatternCallElements();
		this.pPatternCallParameterList = new PatternCallParameterListElements();
		this.pPatternCallParameter = new PatternCallParameterElements();
		this.pComplexEventOperator = new ComplexEventOperatorElements();
		this.pBinaryOperator = new BinaryOperatorElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pFollowsOperator = new FollowsOperatorElements();
		this.pOrOperator = new OrOperatorElements();
		this.pAndOperator = new AndOperatorElements();
		this.pUntilOperator = new UntilOperatorElements();
		this.pNegOperator = new NegOperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.viatra.cep.vepl.Vepl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//EventModel:
	//	'package' name=QualifiedName
	//	imports+=Import* ('context' context=Context)?
	//	modelElements+=ModelElement*;
	public EventModelElements getEventModelAccess() {
		return pEventModel;
	}
	
	public ParserRule getEventModelRule() {
		return getEventModelAccess().getRule();
	}

	//Import:
	//	GenericImport | QueryImport;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//GenericImport:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public GenericImportElements getGenericImportAccess() {
		return pGenericImport;
	}
	
	public ParserRule getGenericImportRule() {
		return getGenericImportAccess().getRule();
	}

	//QueryImport:
	//	'import-queries' importedNamespace=QualifiedNameWithWildcard;
	public QueryImportElements getQueryImportAccess() {
		return pQueryImport;
	}
	
	public ParserRule getQueryImportRule() {
		return getQueryImportAccess().getRule();
	}

	//enum ContextEnum:
	//	not_set | chronicle | immediate | strict;
	public ContextEnumElements getContextEnumAccess() {
		return eContextEnum;
	}
	
	public EnumRule getContextEnumRule() {
		return getContextEnumAccess().getRule();
	}

	//enum Context returns ContextEnum:
	//	chronicle | immediate | strict;
	public ContextElements getContextAccess() {
		return eContext;
	}
	
	public EnumRule getContextRule() {
		return getContextAccess().getRule();
	}

	//ModelElement:
	//	Trait | EventPattern | Rule;
	public ModelElementElements getModelElementAccess() {
		return pModelElement;
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}

	/// *******************************************MAIN MODEL ELEMENTS******************************************* / Trait:
	//	'trait' name=ID '{'
	//	parameters=TraitTypedParameterList
	//	//('check' checkExpression = XBlockExpression)?
	//	'}';
	public TraitElements getTraitAccess() {
		return pTrait;
	}
	
	public ParserRule getTraitRule() {
		return getTraitAccess().getRule();
	}

	//EventPattern:
	//	AbstractAtomicEventPattern | ComplexEventPattern;
	public EventPatternElements getEventPatternAccess() {
		return pEventPattern;
	}
	
	public ParserRule getEventPatternRule() {
		return getEventPatternAccess().getRule();
	}

	//AbstractAtomicEventPattern:
	//	AtomicEventPattern | QueryResultChangeEventPattern;
	public AbstractAtomicEventPatternElements getAbstractAtomicEventPatternAccess() {
		return pAbstractAtomicEventPattern;
	}
	
	public ParserRule getAbstractAtomicEventPatternRule() {
		return getAbstractAtomicEventPatternAccess().getRule();
	}

	//AtomicEventPattern:
	//	'atomicEvent' name=ID ('(' parameters=TypedParameterList? ')')? ('with' traits=TraitList)? ('{' ('check'
	//	checkExpression=XBlockExpression)?
	//	'}')?;
	public AtomicEventPatternElements getAtomicEventPatternAccess() {
		return pAtomicEventPattern;
	}
	
	public ParserRule getAtomicEventPatternRule() {
		return getAtomicEventPatternAccess().getRule();
	}

	//QueryResultChangeEventPattern:
	//	'queryEvent' name=ID '(' parameters=TypedParameterList? ')' 'as'
	//	queryReference=ParametrizedQueryReference resultChangeType=QueryResultChangeType?;
	public QueryResultChangeEventPatternElements getQueryResultChangeEventPatternAccess() {
		return pQueryResultChangeEventPattern;
	}
	
	public ParserRule getQueryResultChangeEventPatternRule() {
		return getQueryResultChangeEventPatternAccess().getRule();
	}

	//ComplexEventPattern:
	//	'complexEvent' name=ID '(' parameters=TypedParameterList? ')' '{'
	//	'as' complexEventExpression=ComplexEventExpression ('context' context=Context)?
	//	'}';
	public ComplexEventPatternElements getComplexEventPatternAccess() {
		return pComplexEventPattern;
	}
	
	public ParserRule getComplexEventPatternRule() {
		return getComplexEventPatternAccess().getRule();
	}

	//Rule:
	//	'rule' name=ID 'on' eventPatterns+=ParameterizedPatternCall (',' eventPatterns+=ParameterizedPatternCall)*
	//	action=XBlockExpression;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//enum QueryResultChangeType:
	//	found | lost;
	public QueryResultChangeTypeElements getQueryResultChangeTypeAccess() {
		return eQueryResultChangeType;
	}
	
	public EnumRule getQueryResultChangeTypeRule() {
		return getQueryResultChangeTypeAccess().getRule();
	}

	/// *******************************************IQ PATTERN ELEMENTS******************************************* /
	/// *******************************************FUNCTION ARGUMENT PARAMETERS******************************************* /
	//TraitList:
	//	{TraitList} traits+=[Trait] (',' traits+=[Trait])*;
	public TraitListElements getTraitListAccess() {
		return pTraitList;
	}
	
	public ParserRule getTraitListRule() {
		return getTraitListAccess().getRule();
	}

	//TypedParameterList:
	//	{TypedParameterList} parameters+=TypedParameter (',' parameters+=TypedParameter)*;
	public TypedParameterListElements getTypedParameterListAccess() {
		return pTypedParameterList;
	}
	
	public ParserRule getTypedParameterListRule() {
		return getTypedParameterListAccess().getRule();
	}

	//TypedParameter:
	//	{TypedParameter} name=ID ':' type=JvmTypeReference;
	public TypedParameterElements getTypedParameterAccess() {
		return pTypedParameter;
	}
	
	public ParserRule getTypedParameterRule() {
		return getTypedParameterAccess().getRule();
	}

	//TypedParameterWithDefaultValue:
	//	typedParameter=TypedParameter ('=' value=XAssignment)?;
	public TypedParameterWithDefaultValueElements getTypedParameterWithDefaultValueAccess() {
		return pTypedParameterWithDefaultValue;
	}
	
	public ParserRule getTypedParameterWithDefaultValueRule() {
		return getTypedParameterWithDefaultValueAccess().getRule();
	}

	//TraitTypedParameterList:
	//	parameters+=TypedParameterWithDefaultValue (',' parameters+=TypedParameterWithDefaultValue)*;
	public TraitTypedParameterListElements getTraitTypedParameterListAccess() {
		return pTraitTypedParameterList;
	}
	
	public ParserRule getTraitTypedParameterListRule() {
		return getTraitTypedParameterListAccess().getRule();
	}

	/// *******************************************FUNCTION ARGUMENT PARAMETERS******************************************* /
	/// *******************************************VIATRA QUERY INTEGRATION******************************************* /
	//ParametrizedQueryReference:
	//	query=[iqpl::Pattern] ('(' parameterList=PatternCallParameterList? ')')?;
	public ParametrizedQueryReferenceElements getParametrizedQueryReferenceAccess() {
		return pParametrizedQueryReference;
	}
	
	public ParserRule getParametrizedQueryReferenceRule() {
		return getParametrizedQueryReferenceAccess().getRule();
	}

	/// *******************************************VIATRA QUERY INTEGRATION******************************************* /
	/// *******************************************COMPLEX EVENT EXPRESSIONS******************************************* /
	//ComplexEventExpression:
	//	Primary ({ComplexEventExpression.left=current} right+=ChainedExpression*);
	public ComplexEventExpressionElements getComplexEventExpressionAccess() {
		return pComplexEventExpression;
	}
	
	public ParserRule getComplexEventExpressionRule() {
		return getComplexEventExpressionAccess().getRule();
	}

	//ChainedExpression:
	//	operator=BinaryOperator expression=Primary;
	public ChainedExpressionElements getChainedExpressionAccess() {
		return pChainedExpression;
	}
	
	public ParserRule getChainedExpressionRule() {
		return getChainedExpressionAccess().getRule();
	}

	//Primary ComplexEventExpression:
	//	NormalPrimary | NegatedPrimary
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//NormalPrimary ComplexEventExpression:
	//	Atom multiplicity=AbstractMultiplicity? timewindow=Timewindow? |
	//	'(' ComplexEventExpression ')' multiplicity=AbstractMultiplicity? timewindow=Timewindow?
	public NormalPrimaryElements getNormalPrimaryAccess() {
		return pNormalPrimary;
	}
	
	public ParserRule getNormalPrimaryRule() {
		return getNormalPrimaryAccess().getRule();
	}

	//NegatedPrimary ComplexEventExpression:
	//	negOperator=NegOperator left=NormalPrimary
	public NegatedPrimaryElements getNegatedPrimaryAccess() {
		return pNegatedPrimary;
	}
	
	public ParserRule getNegatedPrimaryRule() {
		return getNegatedPrimaryAccess().getRule();
	}

	//Atom:
	//	patternCall=ParameterizedPatternCall;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//AbstractMultiplicity:
	//	Multiplicity | Infinite | AtLeastOne;
	public AbstractMultiplicityElements getAbstractMultiplicityAccess() {
		return pAbstractMultiplicity;
	}
	
	public ParserRule getAbstractMultiplicityRule() {
		return getAbstractMultiplicityAccess().getRule();
	}

	//Multiplicity AbstractMultiplicity:
	//	{Multiplicity}
	//	'{' value=INT '}'
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}

	//Infinite AbstractMultiplicity:
	//	{Infinite}
	//	'{' '*' '}'
	public InfiniteElements getInfiniteAccess() {
		return pInfinite;
	}
	
	public ParserRule getInfiniteRule() {
		return getInfiniteAccess().getRule();
	}

	//AtLeastOne AbstractMultiplicity:
	//	{AtLeastOne}
	//	'{' '+' '}'
	public AtLeastOneElements getAtLeastOneAccess() {
		return pAtLeastOne;
	}
	
	public ParserRule getAtLeastOneRule() {
		return getAtLeastOneAccess().getRule();
	}

	//Timewindow:
	//	'[' length=INT ']';
	public TimewindowElements getTimewindowAccess() {
		return pTimewindow;
	}
	
	public ParserRule getTimewindowRule() {
		return getTimewindowAccess().getRule();
	}

	//ParameterizedPatternCall:
	//	eventPattern=[EventPattern] ('(' parameterList=PatternCallParameterList? ')')?;
	public ParameterizedPatternCallElements getParameterizedPatternCallAccess() {
		return pParameterizedPatternCall;
	}
	
	public ParserRule getParameterizedPatternCallRule() {
		return getParameterizedPatternCallAccess().getRule();
	}

	//PatternCallParameterList:
	//	{PatternCallParameterList} parameters+=PatternCallParameter (',' parameters+=PatternCallParameter)*;
	public PatternCallParameterListElements getPatternCallParameterListAccess() {
		return pPatternCallParameterList;
	}
	
	public ParserRule getPatternCallParameterListRule() {
		return getPatternCallParameterListAccess().getRule();
	}

	//PatternCallParameter:
	//	{PatternCallParameter} name=ID;
	public PatternCallParameterElements getPatternCallParameterAccess() {
		return pPatternCallParameter;
	}
	
	public ParserRule getPatternCallParameterRule() {
		return getPatternCallParameterAccess().getRule();
	}

	/// *******************************************COMPLEX EVENT EXPRESSIONS******************************************* /
	/// *******************************************OPERATORS******************************************* / ComplexEventOperator:
	//	BinaryOperator | UnaryOperator;
	public ComplexEventOperatorElements getComplexEventOperatorAccess() {
		return pComplexEventOperator;
	}
	
	public ParserRule getComplexEventOperatorRule() {
		return getComplexEventOperatorAccess().getRule();
	}

	//BinaryOperator:
	//	FollowsOperator | OrOperator | AndOperator //| UntilOperator
	//;
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return pBinaryOperator;
	}
	
	public ParserRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}

	//UnaryOperator:
	//	NegOperator;
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//FollowsOperator:
	//	{FollowsOperator}
	//	'->';
	public FollowsOperatorElements getFollowsOperatorAccess() {
		return pFollowsOperator;
	}
	
	public ParserRule getFollowsOperatorRule() {
		return getFollowsOperatorAccess().getRule();
	}

	//OrOperator:
	//	{OrOperator}
	//	'OR';
	public OrOperatorElements getOrOperatorAccess() {
		return pOrOperator;
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}

	//AndOperator:
	//	{AndOperator}
	//	'AND';
	public AndOperatorElements getAndOperatorAccess() {
		return pAndOperator;
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}

	//UntilOperator:
	//	{UntilOperator}
	//	'U';
	public UntilOperatorElements getUntilOperatorAccess() {
		return pUntilOperator;
	}
	
	public ParserRule getUntilOperatorRule() {
		return getUntilOperatorAccess().getRule();
	}

	//NegOperator:
	//	{NegOperator}
	//	'NOT';
	public NegOperatorElements getNegOperatorAccess() {
		return pNegOperator;
	}
	
	public ParserRule getNegOperatorRule() {
		return getNegOperatorAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	} 
}
